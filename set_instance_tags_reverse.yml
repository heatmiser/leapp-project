---
- name: Set instance tag
  hosts: "{{ all | default('control[0]') }}"
  connection: local
  gather_facts: false
  vars:
    instances: "{{ instances_template }}"
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Set instance tag os_major_version based on survey
      when: rhel_inventory_group != "ALL_rhel"
      block:
        - name: Set os_major_version tag for combination merge
          ansible.builtin.set_fact:
            instances_combine:
              tags:
                os_major_version: "{{ rhel_inventory_group | regex_replace('rhel') }}"

        - name: Combine instance extra_var tags with survey-based instance tag os_major_version
          ansible.builtin.set_fact:
            instances: "{{ instances_template | ansible.builtin.combine(instances_combine, recursive=true) }}"

    - name: Set instance tag short_name based on survey
      when: ripu_pet_name is defined
      block:
        - name: Set short_name tag for combination merge
          ansible.builtin.set_fact:
            instances_combine2:
              tags:
                short_name: "{{ ripu_pet_name }}"

        - name: Combine instance extra_var tags with survey-based instance tag short_name
          ansible.builtin.set_fact:
            instances: "{{ instances | ansible.builtin.combine(instances_combine2, recursive=true) }}"

    - name: Get instance details
      ansible.builtin.include_role:
        name: heatmiser.ansible_snapshot.aws
        tasks_from: instance/get_instance_details

    - name: "Populate EC2 instance tags"
      when: instances_details is not none
      amazon.aws.ec2_tag:
        region: "{{ ec2_region }}"
        resource: "{{ item.0 }}"
        state: present
        tags:
          os_major_version: "{{ item.1 | int - 1 }}"
      with_together:
        - "{{ instance_details.instances | map(attribute='instance_id') | list }}"
        - "{{ instance_details.instances | map(attribute='tags.os_major_version') | list }}"
...
